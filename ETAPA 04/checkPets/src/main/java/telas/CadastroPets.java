package telas;

import dao.PetsDao;
import dao.TutorDao;
import javax.swing.JOptionPane;
import model.Pets;
import model.Tutor;

/**
 *
 * @author FernandoHenry
 */
public class CadastroPets extends javax.swing.JFrame {

    /**
     * Creates new form CadastroPets
     */
    public CadastroPets() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public void limparCampos() {
        txtNome.setText("");
        txtPeso.setText("");
        txtDoencas.setText("");
        txtMedicacao.setText("");
        txtHistorico.setText("");
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCheckPets = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblDoencas = new javax.swing.JLabel();
        lblPeso = new javax.swing.JLabel();
        lblHistorico = new javax.swing.JLabel();
        lblMedicacao = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtPeso = new javax.swing.JTextField();
        txtDoencas = new javax.swing.JTextField();
        txtMedicacao = new javax.swing.JTextField();
        txtHistorico = new javax.swing.JTextField();
        btCadastrar = new javax.swing.JButton();
        lblIdTutor = new javax.swing.JLabel();
        txtIdTutor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(31, 89, 116));

        lblCheckPets.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 60)); // NOI18N
        lblCheckPets.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckPets.setText("CheckPets");

        lblNome.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblNome.setForeground(new java.awt.Color(255, 255, 255));
        lblNome.setText("Nome: ");

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cadastro de Pets");

        lblDoencas.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblDoencas.setForeground(new java.awt.Color(255, 255, 255));
        lblDoencas.setText("Doenças:");

        lblPeso.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblPeso.setForeground(new java.awt.Color(255, 255, 255));
        lblPeso.setText("Peso: ");

        lblHistorico.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblHistorico.setForeground(new java.awt.Color(255, 255, 255));
        lblHistorico.setText("Histórico médico:");

        lblMedicacao.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblMedicacao.setForeground(new java.awt.Color(255, 255, 255));
        lblMedicacao.setText("Medicação:");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        txtPeso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesoActionPerformed(evt);
            }
        });

        txtDoencas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoencasActionPerformed(evt);
            }
        });

        txtMedicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicacaoActionPerformed(evt);
            }
        });

        txtHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHistoricoActionPerformed(evt);
            }
        });

        btCadastrar.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 20)); // NOI18N
        btCadastrar.setForeground(new java.awt.Color(31, 91, 116));
        btCadastrar.setText("Cadastrar");
        btCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrarActionPerformed(evt);
            }
        });

        lblIdTutor.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblIdTutor.setForeground(new java.awt.Color(255, 255, 255));
        lblIdTutor.setText("ID Tutor");

        txtIdTutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdTutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(lblCheckPets))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btCadastrar))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblIdTutor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdTutor, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(237, 237, 237))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblMedicacao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtMedicacao, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblHistorico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                .addComponent(txtHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblPeso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblDoencas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDoencas, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblCheckPets, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPeso)
                    .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoencas)
                    .addComponent(txtDoencas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMedicacao, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMedicacao))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHistorico))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdTutor)
                    .addComponent(txtIdTutor, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(btCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtPesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesoActionPerformed

    private void txtDoencasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoencasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoencasActionPerformed

    private void txtMedicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicacaoActionPerformed

    private void txtHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHistoricoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHistoricoActionPerformed

    private void btCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrarActionPerformed
        // Inicia um bloco de código protegido. Qualquer erro (exceção) que ocorrer aqui dentro
// será capturado pelo bloco 'catch' correspondente, evitando que o programa quebre.
        try {
            // --- SEÇÃO 1: COLETA E VALIDAÇÃO DOS DADOS DA TELA ---

            // Obtém o texto digitado pelo usuário no campo de nome.
            String novoNome = txtNome.getText();
            // Obtém o texto digitado no campo de doenças.
            String novoDoencas = txtDoencas.getText();
            // Obtém o texto digitado no campo de medicação.
            String novoMedicacao = txtMedicacao.getText();
            // Obtém o texto digitado no campo de histórico médico.
            String novoHistoricoMedico = txtHistorico.getText();

            // Obtém o texto digitado no campo de peso. É uma String por enquanto.
            String novoPesoStr = txtPeso.getText();
            // Converte a String de peso para um número do tipo 'double'.
            // A função 'replace' troca vírgulas por pontos para evitar erros de formato.
            double novoPeso = Double.parseDouble(novoPesoStr.replace(",", "."));

            // Obtém o texto digitado no campo de ID do tutor. Também é uma String.
            String novoIdTutorStr = txtIdTutor.getText();
            // Converte a String de ID do tutor para um número do tipo 'int'.
            int novoIdTutor = Integer.parseInt(novoIdTutorStr);

            // Validação para garantir que os campos essenciais não estão vazios.
            // O método 'trim()' remove espaços em branco no início e no fim antes de verificar.
            if (novoNome.trim().isEmpty() || novoPesoStr.trim().isEmpty() || novoDoencas.trim().isEmpty()
                    || novoMedicacao.trim().isEmpty() || novoHistoricoMedico.trim().isEmpty()
                    || novoIdTutorStr.trim().isEmpty()) {

                // Se algum campo estiver vazio, exibe uma janela de diálogo com uma mensagem de erro.
                JOptionPane.showMessageDialog(this, "Todos os campos obrigatórios devem ser preenchidos!",
                        "Erro de Validação", JOptionPane.ERROR_MESSAGE);
                // A palavra-chave 'return' interrompe a execução do método imediatamente.
                return;
            }

            // --- SEÇÃO 2: LÓGICA DE NEGÓCIO E PERSISTÊNCIA ---
            // Cria uma nova instância da classe Pets, um objeto "vazio" pronto para ser preenchido.
            Pets novoPet = new Pets();
            // Define o nome do novo pet com o valor obtido da tela.
            novoPet.setNome(novoNome);
            // Define o peso do novo pet.
            novoPet.setPeso(novoPeso);
            // Define as doenças do novo pet.
            novoPet.setDoencas(novoDoencas);
            // Define a medicação do novo pet.
            novoPet.setMedicacao(novoMedicacao);
            // Define o histórico médico do novo pet.
            novoPet.setHistoricoMedico(novoHistoricoMedico);

            // Cria uma instância do DAO (Data Access Object) para interagir com a tabela de pets.
            PetsDao petsDao = new PetsDao();
            // Cria uma instância do DAO para interagir com a tabela de tutores.
            TutorDao tutorDao = new TutorDao();

            // Usa o ID do tutor para buscar o objeto Tutor completo no banco de dados.
            Tutor tutorDoBanco = tutorDao.findById(novoIdTutor);

            // Verifica se a busca pelo tutor retornou um objeto nulo (ou seja, se o tutor não foi encontrado).
            if (tutorDoBanco == null) {
                // Se o tutor não existe, informa o usuário com uma mensagem de erro.
                JOptionPane.showMessageDialog(this, "O Tutor com o ID informado (" + novoIdTutor + ") não foi encontrado.",
                        "Erro de Validação", JOptionPane.ERROR_MESSAGE);
                // E interrompe a execução para não tentar salvar um pet sem tutor.
                return;
            }

            // 🎯 Ponto principal: Associa o objeto Tutor (encontrado) ao objeto Pet.
            // O JPA usará essa associação para salvar a chave estrangeira correta.
            novoPet.setTutor(tutorDoBanco);

            // Chama o método 'salvar' do DAO, que irá persistir o objeto 'novoPet' no banco de dados.
            petsDao.salvar(novoPet);

            // --- SEÇÃO 3: FEEDBACK E LIMPEZA ---
            // Exibe uma mensagem de sucesso para o usuário.
            JOptionPane.showMessageDialog(this, "Pet cadastrado com sucesso!");
            // Chama um método (que você deve ter criado) para limpar os campos da tela.
            limparCampos();

// Se a conversão de String para número (parseDouble ou parseInt) falhar, este bloco é executado.
        } catch (NumberFormatException e) {
            // Informa ao usuário que o formato do número está incorreto.
            JOptionPane.showMessageDialog(this, "O valor para Peso ou ID do Tutor não é um número válido.",
                    "Erro de Formato", JOptionPane.ERROR_MESSAGE);
            // Imprime os detalhes técnicos do erro no console, útil para o desenvolvedor.
            e.printStackTrace();

// Se ocorrer qualquer outro tipo de erro não previsto acima (ex: problema de conexão com o BD).
        } catch (Exception e) {
            // Exibe uma mensagem de erro genérica para o usuário, contendo o motivo do erro.
            JOptionPane.showMessageDialog(this, "Ocorreu um erro inesperado: " + e.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
            // Imprime os detalhes técnicos do erro no console.
            e.printStackTrace();
        }

    }//GEN-LAST:event_btCadastrarActionPerformed

    private void txtIdTutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdTutorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdTutorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroPets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroPets().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCadastrar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCheckPets;
    private javax.swing.JLabel lblDoencas;
    private javax.swing.JLabel lblHistorico;
    private javax.swing.JLabel lblIdTutor;
    private javax.swing.JLabel lblMedicacao;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPeso;
    private javax.swing.JTextField txtDoencas;
    private javax.swing.JTextField txtHistorico;
    private javax.swing.JTextField txtIdTutor;
    private javax.swing.JTextField txtMedicacao;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPeso;
    // End of variables declaration//GEN-END:variables
}
