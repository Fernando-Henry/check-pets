package telas;

import br.com.senac.checkpets.CheckPets;
import dao.ConsultaDao;
import jakarta.persistence.EntityManager;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Consulta;

/**
 *
 * @FernandoHenry
 */
public class Listagem extends javax.swing.JFrame {

    /**
     * Creates new form Listagem
     */
    public Listagem() {
        initComponents();
        carregarDadosIniciais();
    }
    
    /**
     * Método privado para buscar todos os dados do banco e popular a tabela.
     * É uma boa prática criar um método separado para isso.
     */
    private void carregarDadosIniciais() {
        try {
            // Cria o DAO e busca TODOS os dados
            ConsultaDao dao = new ConsultaDao();
            List<Consulta> todasAsConsultas = dao.buscarTodas();
            
            // Usa o mesmo método que você já tem para preencher a tabela!
            preencherTabela(todasAsConsultas);
            
        } catch (Exception e) {
            // Em caso de erro na carga inicial, exibe uma mensagem
            JOptionPane.showMessageDialog(this, "Erro ao carregar os dados iniciais: " + e.getMessage(), 
                                          "Erro de Conexão", JOptionPane.ERROR_MESSAGE);
        }
    }   
    
    // ... seu construtor e outros métodos ...
    /**
     * Preenche a JTable com uma lista de consultas.
     *
     * @param listaConsultas A lista de consultas retornada pelo DAO.
     */
    private void preencherTabela(List<Consulta> listaConsultas) {
        // Obtém o modelo da tabela. DefaultTableModel é o mais comum.
        DefaultTableModel model = (DefaultTableModel) tblListagem.getModel();

        // 1. Limpa a tabela de resultados anteriores
        model.setRowCount(0);

        // 2. Itera sobre a lista de consultas recebida
        for (Consulta consulta : listaConsultas) {
            // 3. Para cada consulta, cria uma linha de dados para a tabela
            Object[] rowData = {
                consulta.getPet().getId(), // Coluna "ID"
                consulta.getPet().getNome(), // Coluna "Nome"
                consulta.getPet().getPeso(), // Coluna "Peso"                
                consulta.getVeterinario().getNome() // Coluna "Veterinário"
            };
            // 4. Adiciona a nova linha ao modelo da tabela
            model.addRow(rowData);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCheckPets = new javax.swing.JLabel();
        lblIdPet = new javax.swing.JLabel();
        lblCadastroDeFunconario = new javax.swing.JLabel();
        lblIdVterinario = new javax.swing.JLabel();
        txtIdPet = new javax.swing.JTextField();
        txtIdVeterinario = new javax.swing.JTextField();
        btPesquisarIdVeterinário = new javax.swing.JButton();
        btPesquisarIdPet = new javax.swing.JButton();
        lblListagem = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListagem = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(31, 89, 116));

        lblCheckPets.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 60)); // NOI18N
        lblCheckPets.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckPets.setText("CheckPets");

        lblIdPet.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblIdPet.setForeground(new java.awt.Color(255, 255, 255));
        lblIdPet.setText("ID Pet:");

        lblCadastroDeFunconario.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblCadastroDeFunconario.setForeground(new java.awt.Color(255, 255, 255));

        lblIdVterinario.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblIdVterinario.setForeground(new java.awt.Color(255, 255, 255));
        lblIdVterinario.setText("ID Veterinário");

        txtIdPet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdPetActionPerformed(evt);
            }
        });

        txtIdVeterinario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdVeterinarioActionPerformed(evt);
            }
        });

        btPesquisarIdVeterinário.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btPesquisarIdVeterinário.setForeground(new java.awt.Color(31, 89, 116));
        btPesquisarIdVeterinário.setText("Pesquisar");
        btPesquisarIdVeterinário.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarIdVeterinárioActionPerformed(evt);
            }
        });

        btPesquisarIdPet.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btPesquisarIdPet.setForeground(new java.awt.Color(31, 89, 116));
        btPesquisarIdPet.setText("Pesquisar");
        btPesquisarIdPet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarIdPetActionPerformed(evt);
            }
        });

        lblListagem.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 30)); // NOI18N
        lblListagem.setForeground(new java.awt.Color(255, 255, 255));
        lblListagem.setText("Listagem Consultas");

        tblListagem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Peso", "Veterinario"
            }
        ));
        jScrollPane1.setViewportView(tblListagem);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCadastroDeFunconario)
                .addGap(373, 373, 373))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblIdVterinario)
                                    .addComponent(lblIdPet))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtIdPet, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtIdVeterinario, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btPesquisarIdVeterinário, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btPesquisarIdPet)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblListagem))
                            .addComponent(lblCheckPets))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblCheckPets, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCadastroDeFunconario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblListagem)
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdPet)
                    .addComponent(txtIdPet, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPesquisarIdPet))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIdVterinario)
                            .addComponent(txtIdVeterinario, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btPesquisarIdVeterinário)))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIdPetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdPetActionPerformed

    }//GEN-LAST:event_txtIdPetActionPerformed

    private void txtIdVeterinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdVeterinarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdVeterinarioActionPerformed

    private void btPesquisarIdPetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarIdPetActionPerformed
        /**
         * Ação executada ao clicar no botão de pesquisar consultas por ID do
         * Pet.
         */
// Inicia o bloco de código protegido contra exceções.
        try {
            // 1. CAPTURA E VALIDAÇÃO DA ENTRADA DO USUÁRIO

            // Pega o texto do campo de ID do Pet e remove espaços em branco.
            String idStr = txtIdPet.getText().trim();

            // Validação de campo vazio.
            if (idStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o ID do Pet para pesquisar.",
                        "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return; // Interrompe a execução.
            }

            // Converte o texto para um número inteiro. Pode lançar NumberFormatException.
            int idPet = Integer.parseInt(idStr);

            // 2. LÓGICA DE NEGÓCIO (BUSCA NO BANCO DE DADOS)
            // Cria a instância do DAO para acessar os dados de consulta.
            ConsultaDao consultaDao = new ConsultaDao();

            // Chama o método do DAO para buscar as consultas pelo ID do Pet.
            List<Consulta> resultados = consultaDao.buscarPorPetId(idPet);

            // 3. ATUALIZAÇÃO DA INTERFACE GRÁFICA
            // Verifica se a busca retornou uma lista vazia.
            if (resultados.isEmpty()) {
                // Informa ao usuário que nenhum resultado foi encontrado.
                JOptionPane.showMessageDialog(this, "Nenhuma consulta encontrada para o Pet com este ID.",
                        "Sem Resultados", JOptionPane.INFORMATION_MESSAGE);
                // Limpa a tabela de buscas anteriores.
                preencherTabela(new ArrayList<>());
            } else {
                // Se encontrou resultados, preenche a tabela.
                preencherTabela(resultados);
            }

// Captura erros de formato numérico (ex: "xyz").
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Por favor, digite um ID numérico válido para o Pet.",
                    "Erro de Formato", JOptionPane.ERROR_MESSAGE);

// Captura quaisquer outros erros inesperados.
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu um erro inesperado ao realizar a busca: " + ex.getMessage(),
                    "Erro Inesperado", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btPesquisarIdPetActionPerformed

    private void btPesquisarIdVeterinárioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarIdVeterinárioActionPerformed
        // Inicia um bloco de código protegido. Qualquer erro (exceção) que ocorrer
        // dentro deste bloco será direcionado para o 'catch' apropriado.
        try {
            // Pega o texto do componente de interface gráfica 'txtIdVeterinario'.
            // O método .trim() é adicionado para remover quaisquer espaços em branco
            // que o usuário possa ter digitado acidentalmente no início ou no fim.
            String idStr = txtIdVeterinario.getText().trim();

            // Verifica se a String está vazia. Esta é uma validação importante
            // para evitar que uma busca desnecessária seja feita no banco de dados.
            if (idStr.isEmpty()) {
                // Se estiver vazia, exibe uma janela de aviso para o usuário.
                JOptionPane.showMessageDialog(this, "Por favor, digite um ID para pesquisar.",
                        "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                // Interrompe a execução do método para não continuar com o código abaixo.
                return;
            }

            // Tenta converter o texto (String) para um número inteiro (int).
            // Se o texto não for um número válido (ex: "abc"), esta linha
            // irá falhar e o código pulará para o bloco 'catch (NumberFormatException e)'.
            int idVeterinario = Integer.parseInt(idStr);

            // Cria uma nova instância da classe ConsultaDao. Este objeto é responsável
            // por toda a comunicação com a tabela de consultas no banco de dados.
            ConsultaDao consultaDao = new ConsultaDao();

            // Chama o método 'buscarPorVeterinario' do DAO, passando o ID que o usuário digitou.
            // O método vai ao banco de dados, executa a busca e retorna uma Lista de objetos Consulta.
            List<Consulta> resultados = consultaDao.buscarPorVeterinario(idVeterinario);

            // Verifica se a lista retornada pelo banco de dados está vazia.
            if (resultados.isEmpty()) {
                // Se a lista estiver vazia, significa que a busca foi bem-sucedida, mas nenhum
                // registro correspondente foi encontrado. Uma mensagem informativa é exibida.
                JOptionPane.showMessageDialog(this, "Nenhuma consulta encontrada para o veterinário com este ID.",
                        "Sem Resultados", JOptionPane.INFORMATION_MESSAGE);
                // Chama o método preencherTabela com uma lista vazia para limpar a interface de buscas anteriores.
                preencherTabela(new ArrayList<>());
            } else {
                // Se a lista não estiver vazia, chama o método 'preencherTabela' para
                // exibir os resultados encontrados na interface gráfica (JTable).
                preencherTabela(resultados);
            }

// Este bloco 'catch' é executado APENAS se a linha 'Integer.parseInt(idStr)' falhar.
        } catch (NumberFormatException ex) {
            // Exibe uma mensagem de erro clara para o usuário, informando que o formato do ID está incorreto.
            JOptionPane.showMessageDialog(this, "Por favor, digite um ID numérico válido.",
                    "Erro de Formato", JOptionPane.ERROR_MESSAGE);

// Este bloco 'catch' é um "coringa". Ele captura qualquer outro tipo de erro que não seja
// NumberFormatException (por exemplo, um erro de conexão com o banco de dados).
        } catch (Exception ex) {
            // Exibe uma mensagem de erro genérica, útil para debugar problemas inesperados.
            JOptionPane.showMessageDialog(this, "Ocorreu um erro inesperado ao realizar a busca: " + ex.getMessage(),
                    "Erro Inesperado", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btPesquisarIdVeterinárioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Listagem.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Listagem.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Listagem.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Listagem.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Listagem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btPesquisarIdPet;
    private javax.swing.JButton btPesquisarIdVeterinário;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCadastroDeFunconario;
    private javax.swing.JLabel lblCheckPets;
    private javax.swing.JLabel lblIdPet;
    private javax.swing.JLabel lblIdVterinario;
    private javax.swing.JLabel lblListagem;
    private javax.swing.JTable tblListagem;
    private javax.swing.JTextField txtIdPet;
    private javax.swing.JTextField txtIdVeterinario;
    // End of variables declaration//GEN-END:variables
}
